# -*- coding: UTF-8 -*-

import sys
import os
import utils
import uinput
import spidev
import time
import threading

from PyQt4 import QtGui,QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *


device = uinput.Device([uinput.KEY_A,
			uinput.KEY_B,
			uinput.KEY_C,
			uinput.KEY_D,
			uinput.KEY_E,
			uinput.KEY_F,
			uinput.KEY_G,
			uinput.KEY_H,
			uinput.KEY_I,
			uinput.KEY_J,
			uinput.KEY_K,
			uinput.KEY_L,
			uinput.KEY_M,
			uinput.KEY_N,
			uinput.KEY_O,
			uinput.KEY_P,
			uinput.KEY_Q,
			uinput.KEY_R,
			uinput.KEY_S,
			uinput.KEY_T,
			uinput.KEY_U,
			uinput.KEY_V,
			uinput.KEY_W,
			uinput.KEY_X,
			uinput.KEY_Y,
			uinput.KEY_Z,
			uinput.KEY_LEFTSHIFT,
			uinput.KEY_ENTER,
                        uinput.KEY_SPACE
			])

functionmap = [[device.emit_click, device.emit_combo, False, device.emit_click],  #€¡, €¢, €»
               [device.emit_click, device.emit_click, False, device.emit_click],  #    €€, €©
               [device.emit_click, device.emit_combo, False, device.emit_click],  #€§, €š, €Œ
               [device.emit_click, device.emit_combo, False, device.emit_click],  #€², €³, €œ
               [device.emit_click, device.emit_click, False, device.emit_click],  #¶çŸîŸ²±â
               [device.emit_click, device.emit_combo, False, device.emit_click],  #   €¶, €µ
               [device.emit_click, device.emit_combo, False, device.emit_click],  #€ž, €¹, €º
               [device.emit_click, device.emit_click, False, device.emit_click]]  #€·, €Ÿ, €±

parmmap = [[uinput.KEY_R, [uinput.KEY_LEFTSHIFT, uinput.KEY_R], False, uinput.KEY_Z],
           [uinput.KEY_S,uinput.KEY_F, []],
           [uinput.KEY_E, [uinput.KEY_LEFTSHIFT, uinput.KEY_E], False, uinput.KEY_X],
           [uinput.KEY_Q, [uinput.KEY_LEFTSHIFT, uinput.KEY_Q], False, uinput.KEY_V],
           [uinput.KEY_SPACE, uinput.KEY_SPACE, False, uinput.KEY_SPACE],
           [uinput.KEY_T, [uinput.KEY_LEFTSHIFT, uinput.KEY_T], False, []],
           [uinput.KEY_W, [uinput.KEY_LEFTSHIFT, uinput.KEY_W], False, uinput.KEY_C],
           [uinput.KEY_D, uinput.KEY_G, False, uinput.KEY_A]]


ismap1 = [[True, True, False, True],
         [True, True, False, False],
         [True, True, False, True],
         [True, True, False, True],
         [False, False, False, False],
         [True, True, False, False],
         [True, True, False, True],
         [True, True, False, True]]




functionmap2 = [[device.emit_click, device.emit_click, False, device.emit_click],  #€¡, €¢, €»
               [device.emit_click, device.emit_combo, False, device.emit_click],  #    €€, €©
               [device.emit_click, device.emit_click, False, device.emit_click],  #€§, €š, €Œ
               [device.emit_click, device.emit_click, False, device.emit_click],  #€², €³, €œ
               [device.emit_click, device.emit_click, False, device.emit_click],  #¶çŸîŸ²±â
               [device.emit_click, device.emit_click, False, device.emit_click],  #   €¶, €µ
               [device.emit_click, device.emit_click, False, device.emit_click],  #€ž, €¹, €º
               [device.emit_click, device.emit_combo, False, device.emit_click]]  #€·, €Ÿ, €±

parmmap2 = [[[], uinput.KEY_Y, False, uinput.KEY_H],
           [[], [uinput.KEY_LEFTSHIFT, uinput.KEY_O], False, uinput.KEY_O],
           [[], uinput.KEY_I, False, uinput.KEY_K],
           [[], uinput.KEY_B, False, uinput.KEY_N],
           [uinput.KEY_SPACE, uinput.KEY_SPACE, False, uinput.KEY_SPACE],
           [[], uinput.KEY_L, False, uinput.KEY_M],
           [[], uinput.KEY_U, False, uinput.KEY_J],
           [[], [uinput.KEY_LEFTSHIFT, uinput.KEY_P], False, uinput.KEY_P]]


ismap2 = [[False, True, False, True],
         [False, True, False, True],
         [False, True, False, True],
         [False, True, False, True],
         [False, False, False, False],
         [False, True, False, True],
         [False, True, False, True],
         [False, True, False, True]]



window = 0


# Open SPI bus
spi = spidev.SpiDev()
spi.open(0,0)		# it will open /dev/spidev-0.0
 
# Function to read SPI data from MCP3008 chip
# Channel must be an integer 0-7
def ReadChannel(channel):
	adc = spi.xfer2([1,(8+channel)<<4,0])
	data = ((adc[1]&3) << 8) + adc[2]
	return data

delay = 0.05

joy_xL=1
joy_yL=2
joy_buttonL=0

joy_xR=4
joy_yR=5
joy_buttonR=3


def keyboard():
  global window
  isOneclick = False
  isSelect = False
  state = 0
  pase = 0
  x_s = -1
  y_s = -1

  position = -1

  pos_75d = False
  pos_15d = False
  pos_165d = False
  pos_105d = False

  pos_45d = False
  pos_135d = False

  while True:
    
    xPos=ReadChannel(joy_xL) - 512
    yPos=ReadChannel(joy_yL) - 512
  
    pos_75d = False  #1
    pos_15d = False  #2
    pos_165d = False  #3
    pos_105d = False  #4
    pos_45d = False
    pos_135d = False
    
    if isSelect == True:
      print "pase : ", pase," x_s : ", x_s, " y_s : ", y_s
      isSelect = False
      if x_s < 0 or y_s < 0:
        pass
      else:
        if pase == 0:
          if ismap1[x_s][y_s] == True:
            functionmap[x_s][y_s](parmmap[x_s][y_s])
            window.st = True  #cons
            window.mFlag = False
            window.joystickPressEvent(-1)
            state = 0
            x_s = -1
            y_s = -1
        else:
          if ismap2[x_s][y_s] == True:
            functionmap2[x_s][y_s](parmmap2[x_s][y_s])
            window.st = False  #vow
            window.mFlag = False
            window.joystickPressEvent(-1)
            state = 0
            x_s = -1
            y_s = -1
      


    if state == 0:
      if 3.732*xPos <= yPos: #80d = 5.671 , 75d = 3.732
        pos_75d = True
      if 0.268*xPos <= yPos: #10d = 0.176 , 15d = 0.268
        pos_15d = True
      if -0.268*xPos <= yPos: #170d = -0.176 , 165d = -0.268
        pos_165d = True
      if -3.732*xPos <= yPos: #100d = -5.671 , 105d = -3.732
        pos_105d = True


      if xPos*xPos + yPos*yPos <= 256*256:#8방향
        position = -1
      elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == True:
        position = 0
      elif pos_75d == False and pos_15d == True and pos_165d == True and pos_105d == True:
        position = 1
      elif pos_75d == False and pos_15d == False and pos_165d == True and pos_105d == True:
        position = 2
      elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == True:
        position = 3
      elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == False:
        position = 4
      elif pos_75d == True and pos_15d == False and pos_165d == False and pos_105d == False:
        position = 5
      elif pos_75d == True and pos_15d == True and pos_165d == False and pos_105d == False:
        position = 6
      elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == False:
        position = 7
    else:#4방향
      if xPos <= yPos:
        pos_45d = True
      if (-1)*xPos <= yPos:
        pos_135d = True
      if xPos*xPos + yPos*yPos <= 256*256:
        position = -1
      elif pos_45d == True and pos_135d == True:
        position = 0
      elif pos_45d == False and pos_135d == True:
        position = 1
      elif pos_45d == False and pos_135d == False:
        position = 2
      elif pos_45d == True and pos_135d == False:
        position = 3
      
      #¿©±â¿¡ x_s, y_s °ªÀ» ÀÌ¿ëÇØŒ­ Å×ÀÌºí¿¡Œ­ Ã£ŸÆŒ­ Ž©ž£žé µÊ
    if state == 0:
      #print position
      x_s = -1
      y_s = -1
      if position == -1: #no move
        isOneclick = False;
      elif position == 4:
        if isOneclick == False:
          isOneclick = True
          x_s = -1
          y_s = -1
          if pase == 0:
            pase = 1
          else:
            pase = 0
          window.joystickPressEvent(4)
      else:
        if isOneclick == False:
          isOneclick = True
          x_s = position
          y_s = -1
          state = 1
          if pase == 0: #cons
            window.st = True
            window.mFlag = True
          if pase == 1: #vow
            window.st = False
            window.mFlag = True
          window.joystickPressEvent(x_s)
    else:
      if position == -1: #no move
        isOneclick = False;
      elif position == 2: #dn
        if isOneclick == False:
          isOneclick = True
          y_s = -1
          state = 0
          window.joystickPressEvent(-1)
      else:
        if isOneclick == False:
          isOneclick = True
          y_s = position
          isSelect = True
   
    time.sleep(delay)

def click():
  isSWTclick = False
  while True:
    swt_value=ReadChannel(joy_buttonL)
    if swt_value==1 and isSWTclick == False:
      isSWTclick = True
      device.emit_click(uinput.KEY_ENTER)
    elif swt_value != 1:
      isSWTclick = False
    time.sleep(delay)

def getSwitchClick(swt_val):
  if swt_val==1:
    device.emit_click(uinput.KEY_ENTER)

class SlideShowPics(QtGui.QMainWindow):

	# SlideShowPics class defines the methods for UI and working logic
	def __init__(self, imgLstC, imgLstV, parent=None):
		super(SlideShowPics, self).__init__(parent)
		# self._path = path	
		self.st = True #st=True -> consonant, st=1 -> vowel		
		self.view_path = None
		self._imagesInListC = imgLstC #image list about consonant
		self._imagesInListV = imgLstV #image list about vowel
		self.mFlag = True #different main screen(consonant, vowel) and second screen(detail con,vo)
		self.prepairWindow()
		self.buildUi()
		self.changImg() #change consonant to vowel, vowel to consonant
		self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

		
	def prepairWindow(self):
		# Centre UI		
		screen = QtGui.QDesktopWidget().screenGeometry(self)
		size = self.geometry()
		
		self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
		self.setStyleSheet("QWidget{background-color: WHITE;}")
		self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint) #the main window will stay always on top of the other apps.
		self.showFullScreen()		
		self.buildUi()

	def buildUi(self):
		font = QtGui.QFont("UnDotum",50,QtGui.QFont.Bold,False)

		self.le = QLineEdit()
		self.le.setObjectName("inputText")
		self.le.setReadOnly(False)
		self.le.setFont(font)
		self.le.setTextMargins (30, 30, 30, 30)
		self.setMenuWidget(self.le)

		self.label = QtGui.QLabel()
		self.label.setAlignment(QtCore.Qt.AlignCenter)
		self.setCentralWidget(self.label)

	def changImg(self):
		# switch to main image(consonant or vowel) or second image(detail)
		if self.st == True:
			self.mFlag=True
			self.showImageByPath(
					self._imagesInListC[1])

		if self.st == False:
			self.mFlag=True
			self.showImageByPath(
					self._imagesInListV[2])

	def showImageByPath(self, path):
		self.view_path = path
		thread = LoadImageThread()
		self.connect(thread, QtCore.SIGNAL("showImage()"), self.showImage)
		thread.start()


	def showImage(self):
		path = self.view_path
		image = QtGui.QImage(path)
		pp = QtGui.QPixmap.fromImage(image)
		self.label.setPixmap(pp.scaled(
				self.label.size(),
				QtCore.Qt.KeepAspectRatio,
				QtCore.Qt.SmoothTransformation))


	def joystickPressEvent(self, event):
		# Capture key to exit, next image, previous image, on Escape , Key Right and key left respectively.

		if self.mFlag==True and event == 7:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[5])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[4])
			
		elif self.mFlag==True and event == 0:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[4])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[1])

		elif self.mFlag==True and event == 1:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[3])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[0])

		elif self.mFlag==True and event == 6:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[2])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[3])

		elif self.mFlag==True and event == 2:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[7])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[7])

		elif self.mFlag==True and event == 5:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[6])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[6])

		elif self.mFlag==True and event == 3:
			self.mFlag=False
			if self.st == True:
				self.showImageByPath(self._imagesInListC[0])
			elif self.st == False:
				self.showImageByPath(self._imagesInListV[5])

		elif self.mFlag==True and event == 4: 
			#this state-main screen and click down
			if self.st == True:
				self.st = False
			else:
				self.st = True
			self.changImg()
		elif self.mFlag==False:
			if event == -1: #change main screen after insert Nothing
				self.changImg()
			elif event == QtCore.Qt.Key_A or event == QtCore.Qt.Key_W or event == QtCore.Qt.Key_D:#change main screen after insert
				self.changImg()

class LoadImageThread(QtCore.QThread):
	trigger = QtCore.pyqtSignal(int)
	def __init__(self):
		QtCore.QThread.__init__(self)
	def __del__(self):
		self.wait()

	def run(self):
		self.emit(QtCore.SIGNAL('showImage()'))
		self.emit(QtCore.SIGNAL('showImage()'))


def main(pathc, pathv):
  global window
  th=threading.Thread(target=keyboard)
  th.start()
  th2=threading.Thread(target=click)
  th2.start()
  if isinstance(pathc, list):
    imgLstC = utils.imageFilePaths(pathc)
  elif isinstance(pathc, str):
    imgLstC = utils.imageFilePaths([pathc])

  if isinstance(pathv, list):
    imgLstV = utils.imageFilePaths(pathv)
  elif isinstance(pathv, str):
    imgLstV =  utils.imageFilePaths([pathv])

  app = QtGui.QApplication(sys.argv)

  window = SlideShowPics(imgLstC, imgLstV)
  window.show()
  window.raise_()
  app.exec_()

if __name__ == '__main__':
	pathV = 'image/vowel'
	pathC = 'image/consonant'
	main(pathC, pathV)
	
