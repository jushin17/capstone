# -*- coding: UTF-8 -*-

import sys
import os
import utils
import uinput
import spidev
import time
import threading
import PiTooth

from PyQt4 import QtGui,QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *

device = uinput.Device([uinput.KEY_A,
			uinput.KEY_B,
			uinput.KEY_C,
			uinput.KEY_D,
			uinput.KEY_E,
			uinput.KEY_F,
			uinput.KEY_G,
			uinput.KEY_H,
			uinput.KEY_I,
			uinput.KEY_J,
			uinput.KEY_K,
			uinput.KEY_L,
			uinput.KEY_M,
			uinput.KEY_N,
			uinput.KEY_O,
			uinput.KEY_P,
			uinput.KEY_Q,
			uinput.KEY_R,
			uinput.KEY_S,
			uinput.KEY_T,
			uinput.KEY_U,
			uinput.KEY_V,
			uinput.KEY_W,
			uinput.KEY_X,
			uinput.KEY_Y,
			uinput.KEY_Z,
			uinput.KEY_LEFTSHIFT,
			uinput.KEY_ENTER,
			uinput.KEY_SPACE,
			uinput.KEY_BACKSPACE
			])

functionmap = [[device.emit_click, device.emit_combo, False, device.emit_click],  #€¡, €¢, €»
               [device.emit_click, device.emit_click, False, device.emit_click],  #    €€, €©
               [device.emit_click, device.emit_combo, False, device.emit_click],  #€§, €š, €Œ
               [device.emit_click, device.emit_combo, False, device.emit_click],  #€², €³, €œ
               [device.emit_click, device.emit_combo, False, device.emit_click],  #¶çŸîŸ²±â
               [device.emit_click, device.emit_combo, False, device.emit_click],  #   €¶, €µ
               [device.emit_click, device.emit_click, False, device.emit_click],
               [device.emit_click, device.emit_click, False, device.emit_click]]  #€·, €Ÿ, €±

parmmap = [[uinput.KEY_R, [uinput.KEY_LEFTSHIFT, uinput.KEY_R], False, uinput.KEY_Z],
           [uinput.KEY_S, uinput.KEY_F, []],
           [uinput.KEY_E, [uinput.KEY_LEFTSHIFT, uinput.KEY_E], False, uinput.KEY_X],
           [uinput.KEY_Q, [uinput.KEY_LEFTSHIFT, uinput.KEY_Q], False, uinput.KEY_V],
           [uinput.KEY_W, [uinput.KEY_LEFTSHIFT, uinput.KEY_W], False, uinput.KEY_C],
           [uinput.KEY_T, [uinput.KEY_LEFTSHIFT, uinput.KEY_T], False, []],
           [uinput.KEY_BACKSPACE, uinput.KEY_BACKSPACE, False, uinput.KEY_BACKSPACE],
           [uinput.KEY_D, uinput.KEY_G, False, uinput.KEY_A]]

bluemap = [[[True, "KEY_R"],[False, "KEY_R"],[],[True, "KEY_Z"]],
[[True, "KEY_S"],[True, "KEY_F"],[],[]],
[[True, "KEY_E"],[False, "KEY_E"],[],[True, "KEY_X"]],
[[True, "KEY_Q"],[False, "KEY_Q"],[],[True, "KEY_V"]],
[[True, "KEY_W"],[False, "KEY_W"],[],[True, "KEY_C"]],
[[True, "KEY_T"],[False, "KEY_T"],[],[]],
[[True, "KEY_BACKSPACE"],[True, "KEY_BACKSPACE"],[],[True, "KEY_BACKSPACE"]],
[[True, "KEY_D"],[True, "KEY_G"],[],[True, "KEY_A"]]]



ismap1 = [[True, True, False, True],
         [True, True, False, False],
         [True, True, False, True],
         [True, True, False, True],
         [True, True, False, True],
         [True, True, False, False],
         [True, True, False, True],
         [True, True, False, True]]

functionmap2 = [[device.emit_click, device.emit_click, False, device.emit_click],  #€¡, €¢, €»
               [device.emit_click, device.emit_combo, False, device.emit_click],  #    €€, €©
               [device.emit_click, device.emit_click, False, device.emit_click],  #€§, €š, €Œ
               [device.emit_click, device.emit_click, False, device.emit_click],  #€², €³, €œ
               [device.emit_click, device.emit_click, False, device.emit_click],  #¶çŸîŸ²±â
               [device.emit_click, device.emit_click, False, device.emit_click],  #   €¶, €µ
               [device.emit_click, device.emit_click, False, device.emit_click],  #€ž, €¹, €º
               [device.emit_click, device.emit_combo, False, device.emit_click]]  #€·, €Ÿ, €±

parmmap2 = [[[], uinput.KEY_Y, False, uinput.KEY_H],
           [[], [uinput.KEY_LEFTSHIFT, uinput.KEY_O], False, uinput.KEY_O],
           [[], uinput.KEY_I, False, uinput.KEY_K],
           [[], uinput.KEY_B, False, uinput.KEY_N],
           [uinput.KEY_SPACE, uinput.KEY_SPACE, False, uinput.KEY_SPACE],
           [[], uinput.KEY_L, False, uinput.KEY_M],
           [[], uinput.KEY_U, False, uinput.KEY_J],
           [[], [uinput.KEY_LEFTSHIFT, uinput.KEY_P], False, uinput.KEY_P]]

ismap2 = [[False, True, False, True],
         [False, True, False, True],
         [False, True, False, True],
         [False, True, False, True],
         [True, True, False, True],
         [False, True, False, True],
         [False, True, False, True],
         [False, True, False, True]]



bluemap2 = [
[[],[True, "KEY_Y"],[],[True, "KEY_H"]],
[[],[False, "KEY_O"],[],[True, "KEY_O"]],
[[],[True, "KEY_I"],[],[True, "KEY_K"]],
[[],[True, "KEY_B"],[],[True, "KEY_N"]],
[[True, "KEY_SPACE"],[True, "KEY_SPACE"],[],[True, "KEY_SPACE"]],
[[],[True, "KEY_L"],[],[True, "KEY_M"]],
[[],[True, "KEY_U"],[],[True, "KEY_J"]],
[[],[False, "KEY_P"],[],[True, "KEY_P"]]]


window = 0

bt = None
kb = None


# Open SPI bus
spi = spidev.SpiDev()
spi.open(0,0)		# it will open /dev/spidev-0.0
 
# Function to read SPI data from MCP3008 chip
# Channel must be an integer 0-7
def ReadChannel(channel):
	adc = spi.xfer2([1,(8+channel)<<4,0])
	data = ((adc[1]&3) << 8) + adc[2]
	return data

delay = 0.1

joy_xL=1
joy_yL=2
joy_buttonL=0

joy_xR=4
joy_yR=5
joy_buttonR=3


def keyboard():
	global window
	global bt
	global kb

	isOneclick = False
	isSelect = False
	state = 0
	pase = 0
	x_s = -1
	y_s = -1

	position = -1

	pos_75d = False
	pos_15d = False
	pos_165d = False
	pos_105d = False

	pos_45d = False
	pos_135d = False

	while True:
		xPos=ReadChannel(joy_xL) - 512
		yPos=ReadChannel(joy_yL) - 512
  
		pos_75d = False  #1
		pos_15d = False  #2
		pos_165d = False  #3
		pos_105d = False  #4
		pos_45d = False
		pos_135d = False
    
		if isSelect == True:
			isSelect = False
			if x_s < 0 or y_s < 0:
				pass
			else:
				if pase == 0:#cons
					if ismap1[x_s][y_s] == True:
						functionmap[x_s][y_s](parmmap[x_s][y_s])
						#key = "KEY_R"
						if bluemap[x_s][y_s][0] == True:
							kb.send_event(bluemap[x_s][y_s][1], 1, bt)
							kb.send_event(bluemap[x_s][y_s][1], 0, bt)							
						else:
							kb.send_event("KEY_LEFTSHIFT", 1, bt)
							kb.send_event(bluemap[x_s][y_s][1], 1, bt)
							kb.send_event(bluemap[x_s][y_s][1], 0, bt)
							kb.send_event("KEY_LEFTSHIFT", 0, bt)
							
						window.stC = 0  #cons
						window.mFlagC = False
						window.eventCos(-1)
						state = 0
						x_s = -1
						y_s = -1
				else:#vow
					if ismap2[x_s][y_s] == True:
						functionmap2[x_s][y_s](parmmap2[x_s][y_s])
						window.stC = 1  #vow
						window.mFlagC = False
						window.eventCos(-1)
						state = 0
						x_s = -1
						y_s = -1
		if state == 0:
			if 3.732*xPos <= yPos: #80d = 5.671 , 75d = 3.732
				pos_75d = True
			if 0.268*xPos <= yPos: #10d = 0.176 , 15d = 0.268
				pos_15d = True
			if -0.268*xPos <= yPos: #170d = -0.176 , 165d = -0.268
				pos_165d = True
			if -3.732*xPos <= yPos: #100d = -5.671 , 105d = -3.732
				pos_105d = True

			if xPos*xPos + yPos*yPos <= 256*256:
				position = -1
			elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == True:
				position = 0
			elif pos_75d == False and pos_15d == True and pos_165d == True and pos_105d == True:
				position = 1
			elif pos_75d == False and pos_15d == False and pos_165d == True and pos_105d == True:
				position = 2
			elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == True:
				position = 3
			elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == False:
				position = 4
			elif pos_75d == True and pos_15d == False and pos_165d == False and pos_105d == False:
				position = 5
			elif pos_75d == True and pos_15d == True and pos_165d == False and pos_105d == False:
				position = 6
			elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == False:
				position = 7
		elif state == 1:
			if xPos <= yPos:
				pos_45d = True
			if (-1)*xPos <= yPos:
				pos_135d = True
			if xPos*xPos + yPos*yPos <= 256*256:
				position = -1
			elif pos_45d == True and pos_135d == True:
				position = 0
			elif pos_45d == False and pos_135d == True:
				position = 1
			elif pos_45d == False and pos_135d == False:
				position = 2
			elif pos_45d == True and pos_135d == False:
				position = 3
			
		if state == 0:
			x_s = -1
			y_s = -1
			if position == -1: #no move
				isOneclick = False;
			elif position == 6:
				if isOneclick == False:
					isOneclick = True
					device.emit_click(uinput.KEY_BACKSPACE)
					kb.send_event("KEY_BACKSPACE", 1, bt)
					kb.send_event("KEY_BACKSPACE", 0, bt)
			else:
				if isOneclick == False:
					isOneclick = True
					x_s = position
					y_s = -1
					state = 1
					if pase == 0: #cons
						window.stC = 0
						window.mFlagC = True
					if pase == 1: #vow
						window.stC = 1
						window.mFlagC = True
					window.eventCos(x_s)
		else:
			if position == -1: #no move
				isOneclick = False;
			elif position == 2: #dn
				if isOneclick == False:
					isOneclick = True
					y_s = -1
					state = 0
					window.eventCos(-1)
			else:
				if isOneclick == False:
					isOneclick = True
					y_s = position
					isSelect = True

		time.sleep(delay)

def keyboard2():
	global window
	isOneclick = False
	isSelect = False
	state = 0
	pase = 0
	x_s = -1
	y_s = -1

	position = -1

	pos_75d = False
	pos_15d = False
	pos_165d = False
	pos_105d = False

	pos_45d = False
	pos_135d = False

	while True:
		xPos=ReadChannel(joy_xR) - 512
		yPos=ReadChannel(joy_yR) - 512
  
		pos_75d = False  #1
		pos_15d = False  #2
		pos_165d = False  #3
		pos_105d = False  #4
		pos_45d = False
		pos_135d = False
    
		if isSelect == True:
			isSelect = False
			if x_s < 0 or y_s < 0:
				pass
			else:
				if pase == 0:
					if ismap2[x_s][y_s] == True:
						functionmap2[x_s][y_s](parmmap2[x_s][y_s])
						if bluemap2[x_s][y_s][0] == True:
							kb.send_event(bluemap2[x_s][y_s][1], 1, bt)
							kb.send_event(bluemap2[x_s][y_s][1], 0, bt)							
						else:
							kb.send_event("KEY_LEFTSHIFT", 1, bt)
							kb.send_event(bluemap2[x_s][y_s][1], 1, bt)
							kb.send_event(bluemap2[x_s][y_s][1], 0, bt)
							kb.send_event("KEY_LEFTSHIFT", 0, bt)
						#window.st = 1  #vow
						window.mFlagV = False
						window.eventVow(-1)
						state = 0
						x_s = -1
						y_s = -1
				else:
					if ismap2[x_s][y_s] == True:
						functionmap2[x_s][y_s](parmmap2[x_s][y_s])
						#window.st = 1  #vow
						window.mFlagV = False
						window.eventVow(-1)
						state = 0
						x_s = -1
						y_s = -1
		if state == 0:
			if 3.732*xPos <= yPos: #80d = 5.671 , 75d = 3.732
				pos_75d = True
			if 0.268*xPos <= yPos: #10d = 0.176 , 15d = 0.268
				pos_15d = True
			if -0.268*xPos <= yPos: #170d = -0.176 , 165d = -0.268
				pos_165d = True
			if -3.732*xPos <= yPos: #100d = -5.671 , 105d = -3.732
				pos_105d = True

			if xPos*xPos + yPos*yPos <= 256*256:
				position = -1
			elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == True:
				position = 0
			elif pos_75d == False and pos_15d == True and pos_165d == True and pos_105d == True:
				position = 1
			elif pos_75d == False and pos_15d == False and pos_165d == True and pos_105d == True:
				position = 2
			elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == True:
				position = 3
			elif pos_75d == False and pos_15d == False and pos_165d == False and pos_105d == False:
				position = 4
			elif pos_75d == True and pos_15d == False and pos_165d == False and pos_105d == False:
				position = 5
			elif pos_75d == True and pos_15d == True and pos_165d == False and pos_105d == False:
				position = 6
			elif pos_75d == True and pos_15d == True and pos_165d == True and pos_105d == False:
				position = 7
		elif state == 1:
			if xPos <= yPos:
				pos_45d = True
			if (-1)*xPos <= yPos:
				pos_135d = True
			if xPos*xPos + yPos*yPos <= 256*256:
				position = -1
			elif pos_45d == True and pos_135d == True:
				position = 0
			elif pos_45d == False and pos_135d == True:
				position = 1
			elif pos_45d == False and pos_135d == False:
				position = 2
			elif pos_45d == True and pos_135d == False:
				position = 3

		if state == 0:
			x_s = -1
			y_s = -1
			if position == -1: #no move
				isOneclick = False;
			elif position == 4:
				if isOneclick == False:
					isOneclick = True
					device.emit_click(uinput.KEY_SPACE)
					kb.send_event("KEY_SPACE", 1, bt)
					kb.send_event("KEY_SPACE", 0, bt)
				
			else:
				if isOneclick == False:
					isOneclick = True
					x_s = position
					y_s = -1
					state = 1
					if pase == 0: #cons
						#window.st = True
						window.mFlagV = True
					if pase == 1: #vow
						#window.st = False
						window.mFlagV = True
					window.eventVow(x_s)
		else:
			if position == -1: #no move
				isOneclick = False;
			elif position == 2: #dn
				if isOneclick == False:
					isOneclick = True
					y_s = -1
					state = 0
					window.eventVow(-1)
			else:
				if isOneclick == False:
					isOneclick = True
					y_s = position
					isSelect = True

		time.sleep(delay)

def click():
	isSWTclick = False
	while True:
		swt_value=ReadChannel(joy_buttonL)
		if swt_value==1 and isSWTclick == False:
			isSWTclick = True
			device.emit_click(uinput.KEY_ENTER)
			kb.send_event("KEY_ENTER", 1, bt)
			kb.send_event("KEY_ENTER", 0, bt)
		elif swt_value != 1:
			isSWTclick = False
		time.sleep(delay)

def getSwitchClick(swt_val):
	if swt_val==1:
		device.emit_click(uinput.KEY_ENTER)


class SlideShowPics(QtGui.QMainWindow):

	# SlideShowPics class defines the methods for UI and working logic
	def __init__(self, parent=None):
		super(SlideShowPics, self).__init__(parent)
		# self._path = path	
		self.stC = 0 #stC=0 -> consonant, st=1 -> backspace, esc key	
		self.stV = 0 #stV=0 -> vowel, stV=1 -> number
		self.mFlagC = True #different main screen(consonant, each things)
		self.mFlagV = False #different main screen(vowel, each things)
		self.prepairWindow()
		self.buildUi()
		self.changeImgC() #change consonant, backspace, esc
		self.changeImgV() #change vowel, number
		self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
		
	def prepairWindow(self):
		# Centre UI	
		screen = QtGui.QDesktopWidget().screenGeometry(self)
		size = self.geometry()

		self.centralWidget 	=  QWidget(self)
		self.layout 		=  QGridLayout()	
		self.verticalLine 	=  QFrame()
		self.centralWidget.setLayout(self.layout)
		self.verticalLine.setFrameStyle(QFrame.VLine)
		self.verticalLine.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Expanding)
		self.setStyleSheet("QWidget{background-color:WHITE;}")
		self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint) #the main window will stay always on top of the other apps.
		self.splash=QtGui.QLabel()
		self.splash.setAlignment(QtCore.Qt.AlignCenter)
		#self.setFixedSize(screen.width(), screen.height())
		self.showFullScreen()
		self.buildUi()

	def buildUi(self):
		font = QtGui.QFont("UnDotum",30,QtGui.QFont.Bold,False)
		
		self.le = QLineEdit()
		self.le.setObjectName("inputText")
		self.le.setReadOnly(True)
		self.le.setFont(font)
		self.le.setTextMargins (15, 15, 15, 15)
		self.setMenuWidget(self.le)

		self.label = QtGui.QLabel() #create left label
		self.label.setAlignment(QtCore.Qt.AlignLeft)	
		
		self.label2 = QtGui.QLabel() #create right label
		self.label2.setAlignment(QtCore.Qt.AlignRight)
		
		self.layout.addWidget(self.label,0,0)
		self.layout.addWidget(self.label2,0,1)

		self.setCentralWidget(self.centralWidget)

	def changeImgC(self):
		# switch to main image(consonant or vowel) or second image(detail)
		if self.stC == 0:
			self.mFlagC=True
			self.showImageByPathC(
					'image/consonant/8basis.png')

		elif self.stC == 1:
			self.mFlagC=True
			self.showImageByPathC(
					'image/consonant/esc.png')

	def changeImgV(self):
		if self.stV == 0:
			self.mFlagV=True
			self.showImageByPathV(
					'image/vowel/8basis.png')

		elif self.stV == 1:
			self.mFlagC=True
			self.showImageByPathV(
					'image/vowel/udlr.png')
		
	def changeImgV(self):
		self.mFlagV=True
		self.showImageByPathV(
				self._imagesInListV[2])

	def showImageByPathC(self, path):
		self.view_path = path
		thread = LoadImageThread()
		self.connect(thread, QtCore.SIGNAL("showImageC()"), self.showImageC)
		thread.start()

	def showImageByPathV(self, path):
		self.view_path2 = path
		thread = LoadImageThread2()
		self.connect(thread, QtCore.SIGNAL("showImageV()"), self.showImageV)
		thread.start()

	def showImageC(self):
		path = self.view_path
		image = QtGui.QImage(path)
		pp = QtGui.QPixmap.fromImage(image)
		self.label.setPixmap(pp.scaled(
				self.label.size(),
				QtCore.Qt.KeepAspectRatio,
				QtCore.Qt.SmoothTransformation))
	
	def showImageV(self):
		path2 = self.view_path2
		image2 = QtGui.QImage(path2)
		pp2 = QtGui.QPixmap.fromImage(image2)
		self.label2.setPixmap(pp2.scaled(
				self.label2.size(),
				QtCore.Qt.KeepAspectRatio,
				QtCore.Qt.SmoothTransformation))

	def eventCos(self, event):
		if event == QtCore.Qt.Key_Escape:
			self.close()

		elif self.mFlagC==True and event == 7:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/8arrow.png')

		elif self.mFlagC==True and 0:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/1arrow.png')

		elif self.mFlagC==True and 1:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/2arrow.png')

		elif self.mFlagC==True and 6:
			self.mFlagC=False
			if self.stC == 0:
				self.stC = 1
				self.changeImgC()

		elif self.mFlagC==True and 2:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/3arrow.png')

		elif self.mFlagC==True and 5:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/6arrow.png')

		elif self.mFlagC==True and 4:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/5arrow.png')

		elif self.mFlagC==True and 3:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC('image/consonant/4arrow.png')
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and 10:#click 
			#this state-main screen and click down
			if self.stC == 0:
				print "CLICK"
			elif self.stC == 1: 
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==False:
			if self.stC == 0:
				if event == 0 or event == 2 or event == 4 or event == 6: #change main screen after insert Nothing
					self.changeImgC()
			elif self.stC == 1:				
				if event == 10:
					self.stC = 0
					self.changeImgC()
			
	def eventVow(self, event):
		if self.mFlagV==True and event == 7:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/8arrow.png')

		elif self.mFlagV==True and event == 0:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/1arrow.png')

		elif self.mFlagV==True and event == 1:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/2arrow.png')

		elif self.mFlagV==True and event == 6:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/7arrow.png')

		elif self.mFlagV==True and event == 2:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/3arrow.png')

		elif self.mFlagV==True and event == 5:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/6arrow.png')

		elif self.mFlagV==True and event == 3:
			self.mFlagV=False
			if self.stV == 0:
				self.showImageByPathV('image/vowel/4arrow.png')

		elif self.mFlagV==True and event == 10:#click
			self.mFlagV=False
			if self.stV == 0:
				self.stV = 1
				self.changeImgV()

		elif self.mFlagV==False:
			if self.stV == 0:		
				if event == 4 or event == 6 or event == 0 or event == 2:	#change main screen after insert
					self.changeImgV()
			elif self.stV == 1:
				if event == 10: #click
					self.stV = 0
					self.changeImgV()

class LoadImageThread(QtCore.QThread):
	trigger = QtCore.pyqtSignal(int)
	def __init__(self):
		QtCore.QThread.__init__(self)
	def __del__(self):
		self.wait()

	def run(self):
		self.emit(QtCore.SIGNAL('showImageC()'))

class LoadImageThread2(QtCore.QThread):
	trigger = QtCore.pyqtSignal(int)
	def __init__(self):
		QtCore.QThread.__init__(self)
	def __del__(self):
		self.wait()

	def run(self):
		self.emit(QtCore.SIGNAL('showImageV()'))

def main():

	app = QtGui.QApplication(sys.argv)
	window = SlideShowPics()

	# Create and display the splash screen
	splash_pix = QPixmap('image/splash.jpg')
	splash = QSplashScreen(splash_pix, Qt.WindowStaysOnTopHint)
	splash.setMask(splash_pix.mask())
	splash.show()
	app.processEvents()

    # Simulate something that takes time
	splash.finish(window)
	window.show()
	window.raise_()
	app.exec_()

if __name__ == '__main__':
	main()












