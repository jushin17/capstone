import sys
import os
import utils

from PyQt4 import QtGui,QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class SlideShowPics(QtGui.QMainWindow):

	# SlideShowPics class defines the methods for UI and working logic
	def __init__(self, imgLstC, imgLstV, parent=None):
		super(SlideShowPics, self).__init__(parent)
		# self._path = path	
		self.stC = 0 #st=True -> consonant, st=1 -> vowel	
		self.mFlagC = True #different main screen(consonant, vowel) and second screen(detail con,vo)
		self.mFlagV = False
		self._imagesInListC = imgLstC #image list about consonant
		self._imagesInListV = imgLstV #image list about vowel
		self.prepairWindow()
		self.buildUi()
		self.changeImgC() #change consonant, number, sign 
		self.changeImgV() #change vowel
		self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
		
	def prepairWindow(self):
		# Centre UI	
		self.centralWidget 	=  QWidget(self)
		self.layout 		=  QGridLayout()	
		self.verticalLine 	=  QFrame()
		self.centralWidget.setLayout(self.layout)
		self.verticalLine.setFrameStyle(QFrame.VLine)
		self.verticalLine.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Expanding)
		self.setStyleSheet("QWidget{background-color: WHITE;}")
		self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint) #the main window will stay always on top of the other apps.
		self.showFullScreen()
		self.buildUi()

	def buildUi(self):
		font = QtGui.QFont("UnDotum",45,QtGui.QFont.Bold,False)
		
		self.le = QLineEdit()
		self.le.setObjectName("inputText")
		self.le.setReadOnly(True)
		self.le.setFont(font)
		self.le.setTextMargins (20, 20, 20, 20)
		self.setMenuWidget(self.le)

		self.label = QtGui.QLabel()
		self.label.setAlignment(QtCore.Qt.AlignLeft)	
		
		self.label2 = QtGui.QLabel()
		self.label2.setAlignment(QtCore.Qt.AlignRight)
		
		self.layout.addWidget(self.label,0,0)
		self.layout.addWidget(self.verticalLine,0,0,0,0)
		self.layout.addWidget(self.label2,0,1)

		self.setCentralWidget(self.centralWidget)

	def changeImgC(self):
		# switch to main image(consonant or vowel) or second image(detail)
		if self.stC == 0:
			self.mFlagC=True
			self.showImageByPathC(
					self._imagesInListC[2])

		elif self.stC == 1:
			self.mFlagC=True
			self.showImageByPathC(
					self._imagesInListC[1])

		elif self.stC == 2:
			self.mFlagC=True
			self.showImageByPathC(
					self._imagesInListC[9])

		
	def changeImgV(self):
		self.mFlagV=True
		self.showImageByPathV(
				self._imagesInListV[2])

	def showImageByPathC(self, path):
		image = QtGui.QImage(path)
		pp = QtGui.QPixmap.fromImage(image)
		self.label.setPixmap(pp.scaled(
				self.label.size(),
				QtCore.Qt.KeepAspectRatio,
				QtCore.Qt.SmoothTransformation))

	def showImageByPathV(self, path):
		image2 = QtGui.QImage(path)
		pp2 = QtGui.QPixmap.fromImage(image2)
		self.label2.setPixmap(pp2.scaled(
				self.label2.size(),
				QtCore.Qt.KeepAspectRatio,
				QtCore.Qt.SmoothTransformation))

	def keyPressEvent(self, keyevent):
		# Capture key to exit, next image, previous image, on Escape , Key Right and key left respectively.
		event = keyevent.key()
		if event == QtCore.Qt.Key_Escape:
			self.close()

		elif self.mFlagC==True and event == QtCore.Qt.Key_Q:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[7])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()
			
		elif self.mFlagC==True and event == QtCore.Qt.Key_W:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[6])
			elif self.stC == 1:
				self.showImageByPathC(self._imagesInListC[0])
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_E:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[5])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_A:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[2])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_D:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[10])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_Z:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[8])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_X:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[4])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_C:
			self.mFlagC=False
			if self.stC == 0:
				self.showImageByPathC(self._imagesInListC[3])
			elif self.stC == 1:
				self.stC = 0
				self.changeImgC()
			elif self.stC == 2:
				self.stC = 0
				self.changeImgC()

		elif self.mFlagC==True and event == QtCore.Qt.Key_S: 
			#this state-main screen and click down
			if self.stC == 0:
				self.stC = 1
			elif self.stC == 1:
				self.stC = 2
			elif self.stC == 2:
				self.stC = 0
			self.changeImgC()

		elif self.mFlagC==False:
			if event == QtCore.Qt.Key_X: #change main screen after insert Nothing
				self.stC = 0
				self.changeImgC()
			elif event == QtCore.Qt.Key_W: #change main screen after insert Nothing
				self.changeImgC()
			elif event == QtCore.Qt.Key_Q or event == QtCore.Qt.Key_E or event == QtCore.Qt.Key_A or  event == QtCore.Qt.Key_D or event == QtCore.Qt.Key_Z or event == QtCore.Qt.Key_X or event == QtCore.Qt.Key_C: #change main screen after insert Nothing
				self.stC = 0		
				self.changeImgC()
			

		if self.mFlagV==True and event == QtCore.Qt.Key_T:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[4])

		elif self.mFlagV==True and event == QtCore.Qt.Key_Y:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[1])

		elif self.mFlagV==True and event == QtCore.Qt.Key_U:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[0])

		elif self.mFlagV==True and event == QtCore.Qt.Key_G:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[3])

		elif self.mFlagV==True and event == QtCore.Qt.Key_J:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[7])

		elif self.mFlagV==True and event == QtCore.Qt.Key_B:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[6])

		elif self.mFlagV==True and event == QtCore.Qt.Key_M:
			self.mFlagV=False
			self.showImageByPathV(self._imagesInListV[5])

		elif self.mFlagV==False:
			if event == QtCore.Qt.Key_N: #change main screen after insert Nothing
				self.changeImgV()
			elif event == QtCore.Qt.Key_G or event == QtCore.Qt.Key_Y or event == QtCore.Qt.Key_J:#change main screen after insert
				self.changeImgV()

def main(pathc, pathv):
	if isinstance(pathc, list):
		imgLstC = utils.imageFilePaths(pathc)
	elif isinstance(pathc, str):
		imgLstC =  utils.imageFilePaths([pathc])

	if isinstance(pathv, list):
		imgLstV = utils.imageFilePaths(pathv)
	elif isinstance(pathv, str):
		imgLstV =  utils.imageFilePaths([pathv])

	app = QtGui.QApplication(sys.argv)

	window = SlideShowPics(imgLstC, imgLstV)
	window.show()
	window.raise_()
	app.exec_()

if __name__ == '__main__':
	pathV = 'image/vowel'
	pathC = 'image/consonant'
	main(pathC, pathV)
